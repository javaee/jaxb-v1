<?xml version="1.0" encoding="UTF-8" ?>

<!--
 Copyright 2004 Sun Microsystems, Inc. All rights reserved.
 SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
-->

<project name="jaxb" basedir="." default="deploy">

    <description>
        JAXB-RI Master Project
        ======================
 
        This project is organized into multiple sub-projects.  Each sub-project is
        responsible for building itself and then deploying itself back up into the
        main project.  The build files are setup such that you can build the sub-
        projects independently or all together.

        For example, building the codemodel sub-project causes all of codemodel sources 
        in jaxb-ri/codemodel/src to be compiled into jaxb-ri/codemodel/build/classes.
        When the codemodel sub-project is deployed, all of the class files from
        jaxb-ri/codemodel/build/classes are copied into jaxb-ri/build/classes.

        To build the entire project, simply run 'ant deploy' in the jaxb-ri directory.
        To build a sub-project, simply cd into the directory and run 'ant compile'
        or 'ant deploy'.

        To create a distribution of the entire project, simply run 'ant dist' in
        the jaxb-ri directory.
  
        Note: running 'ant dist' from the root project will not cause the spec
        sub-project to be built.  Please run 'ant -projecthelp' in the spec project
        for more detail.

       $Id: src-build.xml,v 1.1 2004-06-25 21:11:01 kohsuke Exp $
    </description>

    <!-- initialize build properties -->
    <property file="${basedir}/build.properties" />

    <target name="init">
        <!-- this property is used by "xjc -version" and is also set in each of the
             generated ObjectFactory classes.  It should be set via the RE build
             scripts via 'ant -Dbuild.id="b08"' otherwise the current date and time
             will be used -->
        <tstamp>
            <format property="now" pattern="MM/dd/yyyy hh:mm aa" unit="hour"/>
        </tstamp>
        <property name="build.id" value="${now}(${user.name})" />
        <property name="build.version" value="${release.impl.version}-${build.id}-${release.impl.version.suffix}" />
        <echo message="The build id is: ${build.version}" />
    </target>

    <!-- compile all of the sources into <project>/build/classes-->
    <target name="compile"
            depends="init"
            description="compile codemodel, runtime, and xjc sub-projects">
        <ant antfile="tools/saxonLiaison/build.xml" target="compile"/>
        <ant dir="codemodel"          target="compile-codemodel" />
        <ant dir="runtime"            target="compile-runtime" />
        <ant dir="runtime-deprecated" target="compile-runtime-deprecated" />
        <ant dir="xjc"                target="compile-xjc" />
    </target>
    
    
    <!-- deploy classes into <root>/build/classes -->
    <target name="deploy" 
            depends="compile"
            description="copy codemodel, runtime, and xjc classes to jaxb-ri/build/classes">
        <mkdir dir="${jaxb.classes}" />
        <ant dir="codemodel"          target="deploy-codemodel" />
        <ant dir="runtime"            target="deploy-runtime" />
        <ant dir="runtime-deprecated" target="deploy-runtime-deprecated" />
        <ant dir="xjc"                target="deploy-xjc" />
    </target>


    <!-- generate a distribution -->
    <target name="dist" 
            depends="deploy"
            description="create a distribution in jaxb-ri/dist">
        <mkdir dir="${jaxb.dist}" />
        <mkdir dir="${jaxb.dist}/bin" />
        <mkdir dir="${jaxb.dist}/lib" />
        <mkdir dir="${jaxb.dist}/docs/api" />
        
        <!-- copy docs -->
        <unzip src="${jaxb.libs.redist}/jaxb-api-doc.zip" 
               dest="${jaxb.dist}/docs/api" />
        <copy todir="${jaxb.dist}/docs">
            <fileset dir="${jaxb.docs}">
                <include name="**/*.html"/>
                <include name="**/*.css"/>
                <include name="**/*.txt"/>
                <include name="**/*.gif"/>
            </fileset>
        </copy>
        <replace dir="${jaxb.dist}/docs">
            <include name="**/*.html"/>
            <replacefilter token="@@SPEC_VERSION@@" 
                           value="${release.spec.version}" />
            <replacefilter token="@@IMPL_VERSION@@" 
                           value="${release.impl.version}"/>
            <replacefilter token="@@JWSDP_VERSION@@" 
                           value="${jwsdp.impl.version}"/>
            <replacefilter token="@@JWSDP_ROOTDIR@@" 
                           value="${jwsdp.root.directory}"/>
        </replace>

        <!-- copy redist jars -->
        <copy todir="${jaxb.dist}/lib">
            <fileset dir="${jaxb.libs.redist}">
                 <include name="**/*.jar"/>
                 <include name="**/*.zip"/>
            </fileset>
        </copy>

        <!-- generate jaxb-impl.jar: runtime subproject-->
        <copy tofile="${runtime.root}/manifest.rt" 
              file="${manifest.root}/manifest.mf"
              overwrite="yes"/>
        <replace file="${runtime.root}/manifest.rt">
            <replacefilter token="@@SPEC_VERSION@@" 
                           value="${release.spec.version}" />
            <replacefilter token="@@IMPL_VERSION@@" 
                           value="${release.impl.version}"/>
            <replacefilter token="@@VENDOR_ID@@" 
                           value="com.sun"/>
            <replacefilter token="@@EXTENSION_NAME@@" 
                           value="com.sun.xml.bind"/>
        </replace>
        <echo file="${runtime.root}/manifest.rt" 
	      append="true"
	      message="Sealed: true"/>

        <jar jarfile="${jaxb.dist}/lib/jaxb-impl.jar"
             manifest="${runtime.root}/manifest.rt"
             duplicate="fail">
            <fileset dir="${runtime.classes}"/>
            <fileset dir="${runtime-deprecated.classes}"/>
        </jar>

        <!-- generate jaxb-xjc.jar: xjc and codemodel subprojects -->
        <copy tofile="${xjc.root}/manifest.xjc" 
              file="${manifest.root}/manifest.mf"
              overwrite="yes"/>
        <replace file="${xjc.root}/manifest.xjc">
            <replacefilter token="@@SPEC_VERSION@@" 
                           value="${release.spec.version}" />
            <replacefilter token="@@IMPL_VERSION@@" 
                           value="${release.impl.version}"/>
            <replacefilter token="@@VENDOR_ID@@" 
                           value="com.sun"/>
            <replacefilter token="@@EXTENSION_NAME@@" 
                           value="com.sun.tools.xjc"/>
        </replace>

        <!-- unjar xsom.jar,relaxng.javadt.jar, and resolver.jar and rejar it into xjc.jar -->
        <mkdir dir="${jaxb.libs.rebundle}/tmp"/>
        <unjar src="${jaxb.libs.rebundle}/xsom.jar" dest="${jaxb.libs.rebundle}/tmp"/>
        <unjar src="${jaxb.libs.rebundle}/resolver.jar" dest="${jaxb.libs.rebundle}/tmp"/>
        <delete dir="${jaxb.libs.rebundle}/tmp/META-INF"/>
        <unjar src="${jaxb.libs.rebundle}/relaxng.javadt.jar" dest="${jaxb.libs.rebundle}/tmp"/>
        <delete> 
            <fileset dir="${jaxb.libs.rebundle}/tmp/META-INF" excludes="**/services/*" />
        </delete>
        <!-- files in the services directory needs to be protected. -->
        
        <!-- the manifest classpath isn't quite like any of the path structures
             supported by Ant, so build the list the old fashioned way -->
        <!--
          even though we don't distribute dom4j, we need to be able to find them
          if they are in the classpath.
        -->
        <property name="manifest.classpath" value="jaxb-api.jar jaxb-impl.jar jaxb-libs.jar sax.jar dom.jar jaxp-api.jar xercesImpl.jar xalan.jar jax-qname.jar namespace.jar xsdlib.jar relaxngDatatype.jar dom4j.jar" />
        <echo file="${xjc.root}/manifest.xjc" append="true"
>Main-Class: com.sun.tools.xjc.Driver
Class-Path: ${manifest.classpath}
Sealed: true

Name: com/sun/tools/xjc/runtime/
Sealed: false

</echo>
        <jar jarfile="${jaxb.dist}/lib/jaxb-xjc.jar"
             manifest="${xjc.root}/manifest.xjc"
	     duplicate="fail">
            <fileset dir="${xjc.classes}"/>
            <fileset dir="${codemodel.classes}"/>
            <fileset dir="${jaxb.libs.rebundle}/tmp"/>
        </jar>
        <!-- clean up tmp dir -->
        <delete dir="${jaxb.libs.rebundle}/tmp"/>

       <!-- unjar everything except xsom.jar and relaxng.javadt.jar in
            the rebundle dir and rejar them as a single jar file -->
        <mkdir dir="${jaxb.libs.rebundle}/tmp"/>
        <unjar dest="${jaxb.libs.rebundle}/tmp">
            <fileset dir="${jaxb.libs.rebundle}">
                <include name="**/*.jar"/>
                <exclude name="xsom.jar"/>
                <exclude name="relaxng.javadt.jar"/>
                <exclude name="resolver.jar"/>
            </fileset>
        </unjar>
        
        <!-- delete the manifest.mf, but be careful to preserve the services dir -->
        <delete file="${jaxb.libs.rebundle}/tmp/META-INF/MANIFEST.MF"/>
        <copy tofile="${jaxb.libs.rebundle}/tmp/META-INF/MANIFEST.MF" 
              file="${manifest.root}/manifest.mf"
              overwrite="yes"/>
        <replace file="${jaxb.libs.rebundle}/tmp/META-INF/MANIFEST.MF">
            <replacefilter token="@@SPEC_VERSION@@" 
                           value="${release.spec.version}" />
            <replacefilter token="@@IMPL_VERSION@@" 
                           value="${release.impl.version}"/>
            <replacefilter token="@@VENDOR_ID@@" 
                           value="com.sun"/>
            <replacefilter token="@@EXTENSION_NAME@@" 
                           value="com.sun.msv"/>
        </replace>
        <jar jarfile="${jaxb.dist}/lib/jaxb-libs.jar"
             duplicate="fail"
             manifest="${jaxb.libs.rebundle}/tmp/META-INF/MANIFEST.MF">
            <fileset dir="${jaxb.libs.rebundle}/tmp"/>
        </jar>
        <delete dir="${jaxb.libs.rebundle}/tmp"/>

        <!-- copy bin scripts -->
        <copy file="${jaxb.root}/tools/bin/xjc.bat" todir="${jaxb.dist}/bin"/>
        <copy file="${jaxb.root}/tools/bin/xjc.sh"  todir="${jaxb.dist}/bin"/>
        <chmod file="${jaxb.dist}/bin/xjc.sh" perm="ugo+rx"/>


        <!-- copy sample apps -->
        <mkdir dir="${jaxb.dist}/samples"/>
        <copy todir="${jaxb.dist}/samples">
            <fileset dir="${jaxb.root}/samples"
                     defaultexcludes="yes">
            </fileset>
        </copy>
        <!-- if wspack.home is set, then don't include the classpath that makes
             the sample apps work in jaxb-ri/dist/samples -->
        <condition property="in.wspack">
            <isset property="wspack.home"/>
        </condition>
        <antcall target="process-sample.inwspack"/>
        <antcall target="process-sample.notinwspack"/>
    </target>
    
    <target name="process-sample.inwspack" if="in.wspack">
        <replace dir="${jaxb.dist}/samples">
            <include name="**/build.xml"/>
            <replacefilter token="@@JAXB-RI_BUILD_PATH@@" />
        </replace>
    </target>
    
    <target name="process-sample.notinwspack" unless="in.wspack">
        <replace dir="${jaxb.dist}/samples">
            <include name="**/build.xml"/>
            <replacefilter token="@@JAXB-RI_BUILD_PATH@@" 
                           value="&lt;fileset dir=&quot;../..&quot; includes=&quot;lib/*.jar&quot; />" />
        </replace>
    </target>
    
    
    <!-- generate api docs -->
    <target name="javadoc"
            description="generate javadocs for spec and codemodel then copy to jaxb-ri/docs">
        <ant dir="codemodel" target="javadoc-codemodel" />
        <ant dir="spec"      target="javadoc-spec" />
        <mkdir dir="${jaxb.docs}/api/codemodel" />
        <mkdir dir="${jaxb.docs}/api/spec" />
        <copy todir="${jaxb.docs}/api/codemodel">
            <fileset dir="${codemodel.docs}/api"/>
        </copy>
        <copy todir="${jaxb.docs}/api/spec">
            <fileset dir="${spec.docs}/api"/>
        </copy>
    </target>


    <!-- clean all of the builds -->
    <target name="clean"
            description="clean dist, build, docs, and each sub-project">
        <!-- clean dist -->
        <delete dir="${jaxb.dist}" />

        <!-- clean deployed classes -->
        <delete dir="${jaxb.root}/build" />

        <!-- clean up docs and dists -->
        <!-- don't delete the top level docs directory -->
        <delete dir="${jaxb.docs}/api" />

        <!-- clean sub-projects -->
        <ant dir="codemodel"          target="clean-codemodel" />
        <ant dir="spec"               target="clean-spec" />
        <ant dir="runtime"            target="clean-runtime" />
        <ant dir="runtime-deprecated" target="clean-runtime-deprecated" />
        <ant dir="xjc"                target="clean-xjc" />
    </target>

</project>
