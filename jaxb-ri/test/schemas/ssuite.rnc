#
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright (c) 2010 Oracle and/or its affiliates. All rights reserved.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common Development
# and Distribution License("CDDL") (collectively, the "License").  You
# may not use this file except in compliance with the License.  You can
# obtain a copy of the License at
# https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
# or packager/legal/LICENSE.txt.  See the License for the specific
# language governing permissions and limitations under the License.
#
# When distributing the software, include this License Header Notice in each
# file and include the License file at packager/legal/LICENSE.txt.
#
# GPL Classpath Exception:
# Oracle designates this particular file as subject to the "Classpath"
# exception as provided by Oracle in the GPL Version 2 section of the License
# file that accompanied this code.
#
# Modifications:
# If applicable, add the following below the License Header, with the fields
# enclosed by brackets [] replaced by your own identifying information:
# "Portions Copyright [year] [name of copyright owner]"
#
# Contributor(s):
# If you wish your version of this file to be governed by only the CDDL or
# only the GPL Version 2, indicate your decision by adding "[Contributor]
# elects to include this software in this distribution under the [CDDL or GPL
# Version 2] license."  If you don't indicate a single choice of license, a
# recipient has the option to distribute your version of this file under
# either the CDDL, the GPL Version 2 or to extend the choice of license to
# its licensees as provided above.  However, if you add GPL Version 2 code
# and therefore, elected the GPL Version 2 license, then the option applies
# only if the new code is made subject to such option by the copyright
# holder.
#

#
# Schema for schema suite file (.ssuite)
# 
# $Id: ssuite.rnc,v 1.2 2010-10-18 14:22:16 snajper Exp $
# 
# 

namespace local = ""

# list of defined extensions
include "performance.rnc"
include "QA.rnc"
include "common.rnc"

start = testSuite

# test suite is a container of testCase/testSuite.
testSuite =
  element testSuite {
    since?,
    until?,
    excludeFrom?,
    
    title,
    description,
    # used as the prefix of all the package names.
    element package {text}?,
    
    # metadata properties
    properties,
    
    # tests
    (testCase|testSuite)*
  }

testCase =
  element testCase {
    since?,
    until?,
    excludeFrom?,
    
    # title of this test. It is also used as
    # Java package name of the generated code,
    # so it should be things like "abc.def.ghi15"
    title,
    
    description?,
    
    # metadata properties
    properties,
    
    (
      schema &        # schema to be compiled
      bindings* &     # external binding files
      resource* &     # other XML files to be produced
      instance* &     # instance documents
      
      # other data
      ssuiteTestCaseBody
    )
  }

# extension point.
# specialization of the batch test framework
# will add their stuff here.
ssuiteTestCaseBody &= empty


title = element title { text }

# if the test doesn't apply to older versions of JAXB, use this
# to mark the fact
since = attribute since { version }

# if the test doesn't apply to newer versions of JAXB, use this
# to mark the fact
until = attribute until { version }



# if the test needs to be excluded from certain versions, use
# this to mark the fact. If 'all' is specified, it will be considered
# to be excluded from all the versions.
excludeFrom = attribute excludeFrom { list { version* } | "all" }






##
## human-readable description of a test
##
description = element description { text }


##
##
## schema file
##
##
schema =
  element schema {
    
    # optional @fail can be used to mark negative test cases.
    # negative schemas are expected to fail to compile.
    attribute fail { "true" }?,
    
    # optional @strict can be used to compile the schema
    # in the strict conformance mode.
    attribute strict { "true" }?,
    
    # additional XJC command line option that should be used
    # when compiling schemas.
    attribute xjcopts {text}?,
    
    # optional parent class loader name. When testing
    # partial code generation, this option can be used
    # to verify that the code works without certain libraries.
    #
    # the value should be the name of a forehead class loader
    attribute classLoader {text}?,
    
    ## @language is used to specify the schema language of this schema.
    ## Currently, DTD, RELAX NG, and XML Schema are the supported languages.
    (
      (# XML Schema
        attribute language {"http://www.w3.org/2001/XMLSchema"},
        # put schema here
        anyElement) |
      (# RELAX NG
        attribute language {"http://relaxng.org/ns/structure/1.0"},
        anyElement ) |
      (# DTD
        attribute language {"DTD"},
        text         # DTD is just a text. Usually you need CDATA section.
      )
    )
  }


##
##
## resource file
##
## resource files are XML files that will be produced into the output
## directory. Usually resource files are used for schemas that are
## included/imported from the primary schema.
## 
##
resource =
  element resource {
    attribute name {text},  # name of the resource file.
    anyElement              # XML
  }


##
##
## external binding file
##
##
bindings =
  element bindings {
    attribute name {text}?, # optional binding file name. "test.jaxb" will be used if omitted
    anyElement              # binding declarations
  }


##
##
## instance document to be used in a test
##
##
instance =
  element instance {
    ## properties for this instance.
    ## properties can be accessible from scripts by
    ## instance.properties.getProperty("abc")
    ##
    ## the property name must be something other than "document"
    element * - document { text }*,
    element document {
      ## actual instance document
      anyElement
    }
  }






##
##
## other metadata descriptions
##
##
# properties are inherited from parents to children
# and accesssible as properties of each test case.
properties = element properties {
  element local:* {text}*
}?


# any element in any namespace
anyElement =
  element * {
    (anyElement|attribute * {text}|text)*
  }
