<?xml version="1.0"?>

<!--
 The contents of this file are subject to the terms
 of the Common Development and Distribution License
 (the "License").  You may not use this file except
 in compliance with the License.
 
 You can obtain a copy of the license at
 https://jwsdp.dev.java.net/CDDLv1.0.html
 See the License for the specific language governing
 permissions and limitations under the License.
 
 When distributing Covered Code, include this CDDL
 HEADER in each file and include the License file at
 https://jwsdp.dev.java.net/CDDLv1.0.html  If applicable,
 add the following below this CDDL HEADER, with the
 fields enclosed by brackets "[]" replaced with your
 own identifying information: Portions Copyright [yyyy]
 [name of copyright owner]
-->

<project name="libs" basedir="../.." default="prepare-libs">

    <description>
        Download all the necessary libs from the web.  You 
        may need to set a proxy via ANT_OPTS if you're behind 
        a firewall.  Something like:

         % export ANT_OPTS="-Dhttp.proxyHost=foo.org -Dhttp.proxyPort=8080 -Dhttps.proxyHost=foo.org -Dhttps.proxyPort=8080"
        
        Be sure to set both http and https.
    </description>
	
    <!-- import build properties -->
    <property file="${basedir}/build.properties" />


    <target name="prepare-libs" depends="download-libs,
        unzip.ant-contrib,
        unzip.args4j,
        unzip.gsc,
        unzip.relaxngcc"
        description="Download all the 3rd party jar files." />

    <target name="-download-libs.check">
       <available file="${jaxb.libs.util}/download.complete"
                  property="download.completed"/>
    </target>

    <target name="download-libs" depends="-download-libs.check" unless="download.completed">
        <mkdir dir="${jaxb.libs.util}"/>
        
		    <taskdef name="fsget" classname="com.sun.tools.ant.FailSafeGetTask">
		      <classpath>
		        <pathelement path="${jaxb.libs.util}/ant-fsget.jar"/>
		      </classpath>
		    </taskdef>
		    
        <!-- if wspack.home is set, then download jars from internal repository -->
        <condition property="in.wspack">
            <isset property="wspack.home"/>
        </condition>
        
        <property name="internal.repository" value="http://jse.east/JAXB/jaxb-ri/1.0/lib"/>
        
	        <fsget dest="${jaxb.libs.util}/xercesImpl-2.6.2.jar" 
	               usetimestamp="true">
	          <source                   url="${internal.repository}/xercesImpl-2.6.2.jar" if="in.wspack" />
	          <source url="http://www.ibiblio.org/maven/xerces/jars/xercesImpl-2.6.2.jar" />
	        </fsget>
	        
	        <fsget dest="${samples.samples-src}/pull-parser/lib/kxml2.jar" 
	               usetimestamp="true">
	          <source                  url="${internal.repository}/kxml2-2.1.8.jar" if="in.wspack" />
	          <source url="http://www.ibiblio.org/maven/kxml2/jars/kxml2-2.1.8.jar" />
	        </fsget>
	        
	        <fsget dest="${samples.samples-src}/pull-parser/lib/xmlpull.jar" 
	               usetimestamp="true">
	          <source                    url="${internal.repository}/xmlpull-1.1.3.4a.jar" if="in.wspack" />
	          <source url="http://www.ibiblio.org/maven/xmlpull/jars/xmlpull-1.1.3.4a.jar" />
	        </fsget>
	        
	        <fsget dest="${jaxb.libs.util}/xalan-2.5.1.jar" 
	               usetimestamp="true">
	          <source                  url="${internal.repository}/xalan-2.5.1.jar" if="in.wspack" />
	          <source url="http://www.ibiblio.org/maven/xalan/jars/xalan-2.5.1.jar" />
	        </fsget>
	        
	        <fsget dest="${jaxb.libs.util}/optional-1.5.4.jar" 
	               usetimestamp="true">
	          <source                url="${internal.repository}/optional-1.5.4.jar" if="in.wspack" />
	          <source url="http://www.ibiblio.org/maven/ant/jars/optional-1.5.4.jar" />
	        </fsget>
	        
	        <fsget dest="${jaxb.libs.util}/nekohtml-0.8.1.jar" 
	               usetimestamp="true">
	          <source                     url="${internal.repository}/nekohtml-0.8.1.jar" if="in.wspack" />
	          <source url="http://www.ibiblio.org/maven/nekohtml/jars/nekohtml-0.8.1.jar" />
	        </fsget>
	        
	        <fsget dest="${jaxb.libs.util}/junit-3.8.jar" 
	               usetimestamp="true">
	          <source                  url="${internal.repository}/junit-3.8.jar" if="in.wspack" />
	          <source url="http://www.ibiblio.org/maven/junit/jars/junit-3.8.jar" />
	        </fsget>
	        
	        <fsget dest="${jaxb.libs.util}/forehead.jar" 
	               usetimestamp="true">
	          <source                     url="${internal.repository}/forehead-1.0-beta-5.jar" if="in.wspack" />
	          <source url="http://www.ibiblio.org/maven/forehead/jars/forehead-1.0-beta-5.jar" />
	        </fsget>
	        
	        <fsget dest="${jaxb.libs.util}/jfreechart-0.9.16.jar" 
	               usetimestamp="true">
	          <source                       url="${internal.repository}/jfreechart-0.9.16.jar" if="in.wspack" />
	          <source url="http://www.ibiblio.org/maven/jfreechart/jars/jfreechart-0.9.16.jar" />
	        </fsget>
	        
	        <fsget dest="${jaxb.libs.util}/jdom-b9.jar" 
	               usetimestamp="true">
	          <source                 url="${internal.repository}/jdom-b9.jar" if="in.wspack" />
	          <source url="http://www.ibiblio.org/maven/jdom/jars/jdom-b9.jar" />
	        </fsget>
	        
	        <fsget dest="${jaxb.libs.util}/jcommon-0.9.1.jar" 
	               usetimestamp="true">
	          <source                    url="${internal.repository}/jcommon-0.9.1.jar" if="in.wspack" />
	          <source url="http://www.ibiblio.org/maven/jcommon/jars/jcommon-0.9.1.jar" />
	        </fsget>
	        
	        <fsget dest="${jaxb.libs.util}/dom4j.jar" 
	               usetimestamp="true">
	          <source                  url="${internal.repository}/dom4j-1.4.jar" if="in.wspack" />
	          <source url="http://www.ibiblio.org/maven/dom4j/jars/dom4j-1.4.jar" />
	        </fsget>
	        
	        <fsget dest="${jaxb.libs.util}/commons-logging-1.0.4.jar" 
	               usetimestamp="true">
	          <source                            url="${internal.repository}/commons-logging-1.0.4.jar" if="in.wspack" />
	          <source url="http://www.ibiblio.org/maven/commons-logging/jars/commons-logging-1.0.4.jar" />
	        </fsget>
	        
	        <fsget dest="${jaxb.libs.util}/bsh-2.0b1.jar" 
	               usetimestamp="true">
	          <source                url="${internal.repository}/bsh-2.0b1-patched.jar" if="in.wspack" />
	          <source url="http://www.ibiblio.org/maven/bsh/jars/bsh-2.0b1.jar" />
	        </fsget>
	        
	        <fsget dest="${jaxb.libs.util}/antlr-2.7.2.jar" 
	               usetimestamp="true">
	          <source                  url="${internal.repository}/antlr-2.7.2.jar" if="in.wspack" />
	          <source url="http://www.ibiblio.org/maven/antlr/jars/antlr-2.7.2.jar" />
	        </fsget>
	        
	        <fsget dest="${jaxb.libs.util}/relaxngcc-20031218.zip" 
	               usetimestamp="true">
	          <source                                url="${internal.repository}/relaxngcc-20031218.zip" if="in.wspack" />
	          <source url="http://superb-east.dl.sourceforge.net/sourceforge/relaxngcc/relaxngcc-20031218.zip" />
	        </fsget>
	        
	        <fsget dest="${jaxb.libs.util}/ant-contrib-0.6-bin.zip" 
	               usetimestamp="true">
	          <source                                  url="${internal.repository}/ant-contrib-0.6-bin.zip" if="in.wspack" />
	          <source url="http://superb-west.dl.sourceforge.net/sourceforge/ant-contrib/ant-contrib-0.6-bin.zip" />
	        </fsget>
	        
	        <fsget dest="${jaxb.libs.util}/jing.jar" 
	               usetimestamp="true">
	          <source  url="${internal.repository}/jing-20030619-patched.jar" if="in.wspack" />
	          <source url="http://iso-relax.sf.net/jing-20030619-patched.jar" />
	        </fsget>
	        
	        <fsget dest="${jaxb.libs.util}/sfx4j-1.0-RC2.jar" 
	               usetimestamp="true">
	          <source                    url="${internal.repository}/sfx4j-1.0-RC2.jar" if="in.wspack" />
	          <source url="https://sfx4j.dev.java.net/nonav/releases/sfx4j-1.0-RC2.jar" />
	        </fsget>
	        
	        <fsget dest="${jaxb.libs.util}/args4j-1.0.zip" 
	               usetimestamp="true">
	          <source                             url="${internal.repository}/args4j-1.0.zip" if="in.wspack" />
	          <source url="http://superb-west.dl.sourceforge.net/sourceforge/args4j/args4j-1.0.zip" />
	        </fsget>
	        
	        <fsget dest="${jaxb.libs.util}/gsc.20031120.zip" 
	               usetimestamp="true">
	          <source     url="${internal.repository}/gsc.20031120.zip" if="in.wspack" />
	          <source url="http://www.kohsuke.org/gsc/gsc.20031120.zip" />
	        </fsget>
	        
	        <fsget dest="${jaxb.libs.util}/vmtools-0.5.jar" 
	               usetimestamp="true">
	          <source url="${internal.repository}/vmtools-0.5.jar" if="in.wspack" />
		  <source url="http://cvs.forge.objectweb.org/cgi-bin/viewcvs.cgi/*checkout*/sync4j/sync4j/sync4j/lib/vmtools-0.5.jar?rev=1.1&hideattic=0&content-type=application/java-archive" />
	        </fsget>
        
        <!--
          we obsereved a problem with the get task where it fails to connect to the server
          when files are already downloaded locally.
          To avoid this problem, we use the existence of this file to avoid running
          this target more than once.
          
          This is fragile, because you have to manually delete this file when this build
          script changes and needs a new jar.
          
          But I think it's still better than failing. In any case, hopefully the whole
          exercise of downloading things from the web will be a bridge solution.
        -->
        <echo file="${jaxb.libs.util}/download.complete">Download all completed</echo>
    </target>
    
    
    
    
    <target name="clean">
      <delete file="${jaxb.libs.util}/download.complete"/>
    </target>
    
    
    
    
    <!--
       individual unzip tasks
    -->
    
    <target name="-unzip.ant-contrib.check">
        <available file="${jaxb.libs.util}/ant-contrib-0.6.jar"
                   property="ant-contrib.available"/>
    </target>
    <target name="unzip.ant-contrib" depends="-unzip.ant-contrib.check" unless="ant-contrib.available">
        <!-- unzip the jars -->
        <unzip src="${jaxb.libs.util}/ant-contrib-0.6-bin.zip"
               dest="${jaxb.libs.util}">
            <patternset includes="lib/ant-contrib-0.6.jar"/>
        </unzip>
        <move  file="${jaxb.libs.util}/lib/ant-contrib-0.6.jar"
             tofile="${jaxb.libs.util}/ant-contrib-0.6.jar" />
        <delete dir="${jaxb.libs.util}/lib/"/>
    </target>
    
    
    <target name="-unzip.args4j.check">
        <available file="${jaxb.libs.util}/args4j-1.0.jar"
                   property="args4j.available"/>
    </target>
    <target name="unzip.args4j" depends="-unzip.args4j.check" unless="args4j.available">
        <!-- unzip the jars -->
        <unzip src="${jaxb.libs.util}/args4j-1.0.zip"
               dest="${jaxb.libs.util}">
            <patternset includes="args4j-1.0/args4j-1.0.jar"/>
        </unzip>
        <move  file="${jaxb.libs.util}/args4j-1.0/args4j-1.0.jar"
             tofile="${jaxb.libs.util}/args4j-1.0.jar" />
        <delete dir="${jaxb.libs.util}/args4j-1.0/"/>
    </target>
    
    
    <target name="-unzip.gsc.check">
        <available file="${jaxb.libs.util}/gsc.jar"
                   property="gsc.available"/>
    </target>
    <target name="unzip.gsc" depends="-unzip.gsc.check" unless="gsc.available">
        <!-- unzip the jars -->
        <unzip src="${jaxb.libs.util}/gsc.20031120.zip"
               dest="${jaxb.libs.util}">
            <patternset includes="gsc.20031120/gsc.jar"/>
        </unzip>
        <move  file="${jaxb.libs.util}/gsc.20031120/gsc.jar"
             tofile="${jaxb.libs.util}/gsc.jar" />
        <delete dir="${jaxb.libs.util}/gsc.20031120/"/>
    </target>
    
    
    <target name="-unzip.relaxngcc.check">
        <available file="${jaxb.libs.util}/relaxngcc.jar"
                   property="relaxngcc.available"/>
    </target>
    <target name="unzip.relaxngcc" depends="-unzip.relaxngcc.check" unless="relaxngcc.available">
        <!-- unzip the jars -->
        <unzip src="${jaxb.libs.util}/relaxngcc-20031218.zip"
               dest="${jaxb.libs.util}">
            <patternset includes="relaxngcc-20031218/relaxngcc.jar"/>
        </unzip>
        <move  file="${jaxb.libs.util}/relaxngcc-20031218/relaxngcc.jar"
             tofile="${jaxb.libs.util}/relaxngcc.jar" />
        <delete dir="${jaxb.libs.util}/relaxngcc-20031218"/>
    </target>
    
</project>
