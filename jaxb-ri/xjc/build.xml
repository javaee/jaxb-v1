<?xml version="1.0"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 2010 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<!-- $Id: build.xml,v 1.4 2010-10-18 14:21:44 snajper Exp $ -->
<project name="xjc" basedir=".." default="deploy">

  <description>
    XJC Sub-Project
    ===============
    
    The xjc project contains all of the source code necessary to process
    schemas and binding customization files into java sources.
  </description>
  
    <!-- import build properties -->
    <property file="${basedir}/build.properties" />

    <!-- libraries that are referenced when compiling Java source files -->
    <path id="javac.classpath">
      <pathelement path="${codemodel.classes}" />
      <pathelement path="${runtime.classes}" />
      <fileset dir="${jaxb.libs.redist}" includes="*.jar"/>
      <fileset dir="${jaxb.libs.rebundle}" includes="*.jar"/>
      <!-- XJCTask depends on Ant. -->
      <fileset dir="${jaxb.libs.util}" includes="ant.jar"/>
      <!-- dependency on dom4j ??? -->  
      <pathelement path="${jaxb.libs.util}/dom4j.jar" />
    </path>

    <target name="init">
        <!-- this property is used by "xjc -version" and is also set in each of the
             generated ObjectFactory classes.  It should be set via the RE build
             scripts via 'ant -Dbuild.id="b08"' otherwise the current date and time
             will be used -->
        <tstamp>
            <format property="now" pattern="MM/dd/yyyy hh:mm aa" unit="hour"/>
        </tstamp>
        <property name="build.id" value="${now}(${user.name})" />
        <property name="build.version" value="${release.impl.version}-${build.id}-${release.impl.version.suffix}" />
        <echo message="The build id is: ${build.version}" />
        <ant dir="${jaxb.root}/tools/source-tidy" target="compile" />
    </target>


    <!-- convenience targets when building alone -->
    <target name="compile" 
            depends="compile-xjc"
            description="compile all xjc src into jaxb-ri/xjc/build/classes" />
    <target name="clean"   
            depends="clean-xjc"
            description="clean jaxb-ri/xjc/build"/>
    <target name="deploy"  
            depends="deploy-xjc"
            description="copy all xjc classes up to jaxb-ri/build/classes"/>
    <target name="javadoc" 
            depends="javadoc-xjc" 
            description="generate javadoc for xjc into jaxb-ri/xjc/docs/api" />

    <!-- check if RelaxNGCC needs to be run -->
    <target name="ngcc-check">
      <!-- generate a schema for validation -->
      <style
          in ="${xjc.src}/com/sun/tools/xjc/reader/xmlschema/bindinfo/binding.rng"
          out="${xjc.src}/com/sun/tools/xjc/reader/xmlschema/bindinfo/binding.purified.rng"
          style="${xjc.src}/purify.xsl" />
      
      <uptodate property="ngcc.notrequired"
           targetfile="${xjc.src}/com/sun/tools/xjc/reader/xmlschema/bindinfo/parser/Root.java">
        <srcfiles dir="${xjc.src}/com/sun/tools/xjc/reader/xmlschema/bindinfo" includes="binding.rng"/>
      </uptodate>
    </target>
    
    <!-- run RELAXNGCC -->
    <target name="ngcc" 
            unless="ngcc.notrequired" 
            depends="ngcc-check">
      <mkdir dir="${xjc.src}/com/sun/tools/xjc/reader/xmlschema/bindinfo/automata"/>
      <delete>
        <fileset dir="${xjc.src}/com/sun/tools/xjc/reader/xmlschema/bindinfo">
          <include name="automata/*.gif"/>
          <include name="parser/*.java"/>
        </fileset>
      </delete>
      <java classname="relaxngcc.RelaxNGCC" fork="true">
        <classpath refid="javac.classpath" />
        <classpath path="${jaxb.libs.util}/relaxngcc.jar"/>
        
        <!-- enable debug statements -->
        <!--arg value="-d"/-->
        
        <!-- dump automata -->
        <!--arg value="- -print-automata"/>
        <arg path="${xjc.src}/com/sun/tools/xjc/reader/xmlschema/bindinfo/automata"/-->
        
        <!-- specify output directory -->
        <arg value="--target"/>
        <arg path="${xjc.src}/com/sun/tools/xjc/reader/xmlschema/bindinfo/parser" />
        
        <!-- source file -->
        <arg path="${xjc.src}/com/sun/tools/xjc/reader/xmlschema/bindinfo/binding.rng"/>
      </java>
    </target>


   <!-- compile Java source files -->
    <target name="compile-xjc" 
            depends="init, ngcc">
        <!-- no way to 'depend' on codemodel and runtime targets, so just -->
        <!-- call the targets to make sure they are up to date            -->
        <ant target="compile" antfile="${codemodel.root}/build.xml" />
        <ant target="compile" antfile="${runtime.root}/build.xml" />

        <mkdir dir="${xjc.classes}" />

        <!-- always delete these prop files so that the latest build id can be set -->
        <delete file="${xjc.classes}/com/sun/tools/xjc/Messages*.properties"/>

        <javac srcdir="${xjc.src}" destdir="${xjc.classes}"
            debug="${compile.debug}" optimize="${compile.optimize}"
            deprecation="${compile.deprecation}" >
            <classpath refid="javac.classpath" />
        </javac>

        <copy toDir="${xjc.classes}">
            <fileset dir="${xjc.src}" includes="**/*.properties" />
            <fileset dir="${xjc.src}" includes="**/*.purified.rng" />
            <fileset dir="${xjc.src}" includes="**/dtd/bindinfo/bindingfile.rng" />
            <fileset dir="${xjc.src}" includes="com/sun/tools/xjc/runtime/**/*" />
        </copy>
        
        <!-- pick up the service info for the XJC addon modules -->
        <copy todir="${xjc.classes}/META-INF">
            <fileset dir="${xjc.src}/META-INF" />
        </copy>

        <!-- insert the RI version number into the file prolog message that
             is placed at the head of every generated file and the output
             message for "xjc -version" -->
        <replace dir="${xjc.classes}/com/sun/tools/xjc" includes="Messages*.properties">
            <replacefilter token="@@BUILD_VERSION@@" value="${build.version}"/>
        </replace>
        
        <!-- clean up the xjc runtime java source code -->
        <java classname="SourceTidy">
          <classpath>
            <pathelement location="${jaxb.root}/tools/source-tidy"/>
          </classpath>
          <arg path="${xjc.classes}/com/sun/tools/xjc/runtime" />
        </java>
        
        <!-- version string used by the VersionGenerator -->
        <replace dir="${xjc.classes}/com/sun/tools/xjc/generator" includes="Messages*.properties">
            <replacefilter token="@@JAXB_VERSION@@" value="${release.impl.version}"/>
        </replace>
    </target>

    <!-- deploy static files back up into the main project -->
    <target name="deploy-static-xjc" 
            depends="compile-xjc">
        <copy toDir="${jaxb.classes}">
            <fileset dir="${xjc.classes}" includes="**/*.properties" />
            <fileset dir="${xjc.classes}" includes="**/*.purified.rng" />
            <fileset dir="${xjc.classes}" includes="**/dtd/bindinfo/bindingfile.rng" />
        </copy>
    </target>

    <!-- deploy the classes back up into the main project -->
    <target name="deploy-xjc" 
            depends="deploy-static-xjc">
        <copy toDir="${jaxb.classes}">
            <fileset dir="${xjc.classes}" includes="**/*.class" />
        </copy>
    </target>
    
    
    <target name="compile-xjc-test" 
            depends="compile-xjc">
        <!-- compile xjc/test -->
        <ant dir="${test.root}" target="compile-test"/>
        <javac srcdir="${xjc.test}" destdir="${xjc.classes}"
            debug="${compile.debug}" optimize="${compile.optimize}">
            <classpath refid="javac.classpath" />
            <classpath path="${xjc.classes}" />
            <classpath path="${runtime.classes}"/>
            <classpath path="${spec.classes}"/>
            <classpath>
              <fileset dir="${jaxb.libs.util}" includes="*.jar" />
            </classpath>
        </javac>
    </target>
    
    
    
    <target name="run-xjc-test" depends="xjc-junit"
            description="execute xjc unit tests - requires junit.jar on system classpath"/>
    
    <!--
      run JUnit-based individual tests.
    -->
    <target name="xjc-junit"
            depends="compile-xjc-test"
            description="runs XJC JUnit tests">
      <junit printsummary="yes" fork="yes"
        haltonerror="no" haltonfailure="no">
        
        <formatter type="plain" />
        
        <classpath path="${java.class.path}" />
        <classpath refid="javac.classpath"/>
        <classpath path="${xjc.classes}"/>
        
        <batchtest todir="test/log">
          <fileset dir="${xjc.classes}" includes="**/*JUTest.class"/>
        </batchtest>
      </junit>
    </target>
    
    
    
    
    
    <path id="javadoc.classpath">
        <pathelement path="${xjc.classes}" />
        <pathelement path="${codemodel.classes}" />
        <pathelement path="${runtime.classes}" />
        <fileset dir="${jaxb.libs.redist}" includes="*.jar"/>
        <fileset dir="${jaxb.libs.rebundle}" includes="*.jar"/>
        <fileset dir="${jaxb.libs.util}" includes="*.jar"/>
    </path>

    
    <target name="javadoc-xjc" 
            depends="compile-xjc">
      <mkdir dir="${xjc.docs}/" />
      <javadoc packagenames=".,com.sun.tools.xjc.generator.marshaller" 
            sourcepath="${xjc.src}"
            destdir="${xjc.docs}"
            use="true"
            author="false"
           
excludepackagenames="com.sun.tools.xjc.generator.marshaller.PassBaseImpl"
            version="false"
            windowtitle="XJC"
            doctitle="XJC">
        <classpath refid="javadoc.classpath" />
      </javadoc>
    </target>
    

    <!-- remove all intermediate files -->
    <target name="clean-xjc">
      <!-- delete all RelaxNGCC-generated files -->
      <delete>
        <fileset dir="${xjc.src}/com/sun/tools/xjc/reader/xmlschema/bindinfo">
          <include name="automata/*.gif"/>
          <include name="parser/*.java"/>
        </fileset>
      </delete>
      
      <delete dir="${xjc.root}/build" />

      <delete file="${xjc.root}/manifest.xjc" />
    </target>

</project>
