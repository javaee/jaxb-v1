<?xml version="1.0"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 2010 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<!--
DTD binding information file which is supported by this version of XJC.
$Id: bindingfile.rng,v 1.4 2010-10-18 14:20:44 snajper Exp $

- Changes from the EA1 is marked by "CHANGE:"
- "ref:key" and "ref:keyref" are used to specify cross-reference
  information.
- "a:defaultValue" is used to specify the default behavior.
  Note that default behaviors are hard-coded to the source code.
  Values specified in this schema is not used in the actual processing.
-->
<grammar
  xmlns="http://relaxng.org/ns/structure/1.0"
  xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc"
  xmlns:a="http://relaxng.org/ns/annotation/1.0"
  xmlns:ref="urn:crossreference"
  datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">

  <start>
    <element name="xml-java-binding-schema">
      <optional>
        <attribute name="version">
          <value>1.0ea2</value>
        </attribute>
      </optional>

      <interleave>
        <optional>
          <element name="options">
            <optional>
              <attribute name="package"/>
            </optional>
          </element>
        </optional>
        <optional>
          <element name="xjc:serializable">
            <optional>
              <attribute name="uid">
                <data type="long"/>
              </attribute>
            </optional>
          </element>
        </optional>
        <optional>
          <element name="xjc:superClass">
            <attribute name="name"/>
          </element>
        </optional>
        <!-- light-weight runtime -->
        <optional>
          <element name="xjc:noMarshaller">
            <empty/>
          </element>
        </optional>
        <optional>
          <element name="xjc:noUnmarshaller">
            <empty/>
          </element>
        </optional>
        <optional>
          <element name="xjc:noValidator">
            <empty/>
          </element>
        </optional>
        <optional>
          <element name="xjc:noValidatingUnmarshaller">
            <empty/>
          </element>
        </optional>
        <zeroOrMore>
          <choice>
            <ref name="toplevel.declaration"/>
            <ref name="global.or.local.declaration"/>
          </choice>
        </zeroOrMore>
      </interleave>
    </element>
  </start>
 
 
 
 
  <!-- element-class declaration -->
  <define name="toplevel.declaration" combine="choice">
    <element name="element">
      <attribute name="name"/>
      <attribute name="type">
        <value>class</value>
      </attribute>
      <optional>
        <attribute name="class">
          <ref name="java.classname.datatype"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="root" a:defaultValue="false">
          <choice>
            <value>true</value>
            <value>false</value>
          </choice>
        </attribute>
      </optional>

      <interleave>
        <!-- attribute-property declaration -->
        <zeroOrMore>
          <element name="attribute">
            <attribute name="name"/>
            <optional>
              <attribute name="property"/>
            </optional>
            <optional>
              <ref name="collection.att"/>
            </optional>
            <optional>
              <attribute name="convert">
                <text ref:keyref="conversion"/>
              </attribute>
            </optional>
          </element>
        </zeroOrMore>

        <zeroOrMore>
          <ref name="global.or.local.declaration"/>
        </zeroOrMore>

        <!-- element-local declarations -->
        <zeroOrMore>
          <element name="constructor">
            <attribute name="properties">
              <list>
                <oneOrMore>
                  <!-- point to a property defined in this element -->
                  <data type="token"/>
                </oneOrMore>
              </list>
            </attribute>
          </element>
        </zeroOrMore>

        <optional>
          <element name="content">
            <interleave>
              <choice>
                <!-- general content-property declaration -->
                <ref name="collection.particle.decl"/>

                <!-- model-based content property declaration -->
                <group>
                  <zeroOrMore>
                    <choice>
                      <element name="element-ref">
                        <attribute name="name"/>
                        <optional>
                          <attribute name="property"/>
                        </optional>
                        <optional>
                          <ref name="collection.att"/>
                        </optional>
                      </element>
                      <element>
                        <choice>
                          <name>sequence</name>
                          <name>choice</name>
                        </choice>
                        <ref name="collection.particle.decl"/>
                      </element>
                    </choice>
                  </zeroOrMore>
                  <optional><!-- followed by an optional <rest> -->
                    <element name="rest">
                      <ref name="collection.particle.decl"/>
                    </element>
                  </optional>
                </group>
              </choice>
            </interleave>
          </element>
        </optional>
      </interleave>
    </element>
  </define>

  <define name="collection.particle.decl">
    <attribute name="property"/>
    <optional>
      <ref name="collection.att"/>
    </optional>
    <optional>
      <attribute name="supertype"/>
    </optional>
  </define>

  <define name="collection.att">
    <attribute name="collection">
      <!-- CHANGE: array is removed and set,vector are added -->
      <choice>
        <value>list</value>
        <value>set</value>
        <value>vector</value>
      </choice>
    </attribute>
  </define>

 
 
  <!-- conversion declaration -->
  <define name="global.or.local.declaration" combine="choice">
    <element name="conversion">
      <attribute name="name" ref:key="conversion"/>
      <optional>
        <!-- defaults to @name -->
        <attribute name="type"/>
      </optional>
      <optional>
        <attribute name="parse" a:defaultValue="new"/>
      </optional>
      <optional>
        <attribute name="print" a:defaultValue="toString"/>
      </optional>
      <optional>
        <attribute name="whitespace" a:defaultValue="collapse">
          <choice>
            <value>preserve</value>
            <value>replace</value><!-- CHANGE: it was normalize -->
            <value>collapse</value>
          </choice>
        </attribute>
      </optional>
    </element>
  </define>
 
  <!-- element-value declaration -->
  <define name="toplevel.declaration" combine="choice">
    <element name="element">
      <attribute name="name"/>
      <attribute name="type">
        <value>value</value>
      </attribute>
      <optional>
        <attribute name="convert">
          <text ref:keyref="conversion"/>
        </attribute>
      </optional>
    </element>
  </define>
 
  <!-- interface declaration -->
  <define name="toplevel.declaration" combine="choice">
    <element name="interface">
      <attribute name="name">
        <ref name="java.classname.datatype"/>
      </attribute>
      <attribute name="members">
        <list>
          <oneOrMore>
            <ref name="java.classname.datatype"/>
          </oneOrMore>
        </list>
      </attribute>
      <!-- CHANGE: TODO: @properties is not supported yet -->
    </element>
  </define>
 
  <!-- enumeration declaration -->
  <define name="global.or.local.declaration" combine="choice">
    <element name="enumeration">
      <attribute name="name">
        <ref name="java.classname.datatype"/>
      </attribute>
      <attribute name="members">
        <list>
          <oneOrMore>
            <data type="token"/>
          </oneOrMore>
        </list>
      </attribute>
    </element>
  </define>
 
 
 
  <!-- valid Java name -->
  <define name="java.name.datatype">
    <!-- TODO: add pattern facet or implement a custom datatype -->
    <data type="token"/>
  </define>

  <define name="java.classname.datatype">
    <ref name="java.name.datatype"/>
  </define>
</grammar>
